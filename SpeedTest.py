# meta developer: @svo_rkn
__version__ = (2,5,0)

from .. import loader, utils
import asyncio
import subprocess

@loader.tds
class SpeedTestMod(loader.Module):
    """
    –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    """
    strings = {"name": "SpeedTest", "version": "1.5.0"}

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Premium."""
        self.premium = getattr(await client.get_me(), 'premium', False)

    async def speedcmd(self, message):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        """
        EMOJI = {
            'header': "‚ö°Ô∏è",
            'server': "üì°",  
            'ping': "‚è±Ô∏è",   
            'download_upload_line_prefix': "üìä",
            'share': "üîó",
            'dev': "‚ú®"
        }

        if self.premium:
            EMOJI['header'] = "<emoji document_id=5881806211195605908>üì∏</emoji>"
            EMOJI['server'] = "<emoji document_id=5879785854284599288>‚ÑπÔ∏è</emoji>"
            EMOJI['ping'] = "<emoji document_id=5890925363067886150>‚ú®</emoji>"
            EMOJI['download_upload_line_prefix'] = "<emoji document_id=5874986954180791957>üì∂</emoji>"
            EMOJI['share'] = "<emoji document_id=6039451237743595514>üìé</emoji>"
            EMOJI['dev'] = "<emoji document_id=5805532930662996322>‚úÖ</emoji>"

        status_message = await utils.answer(message, f"{EMOJI['header']} <b>–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏...</b>\n<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–¥–æ 1-2 –º–∏–Ω—É—Ç).</i>")

        try:
            process = await asyncio.create_subprocess_exec(
                "speedtest-cli", "--secure", "--share",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout_bytes, stderr_bytes = await process.communicate()
            
            stdout = stdout_bytes.decode().strip()
            stderr = stderr_bytes.decode().strip()
            returncode = process.returncode

            if returncode != 0:
                error_output = stderr if stderr else stdout
                await status_message.edit(f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ speedtest (–∫–æ–¥ {returncode}):</b>\n<code>{error_output}</code>")
                return

            if not stdout:
                await status_message.edit(f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–≤–æ–¥ –æ—Ç speedtest-cli. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–ª–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
                return

            parsed_data = {}
            for line in stdout.split('\n'):
                if "Hosted by" in line:
                    parts = line.split("Hosted by ", 1)[1]
                    server_name_loc = parts.split('[')[0].strip()
                    ping_match = parts.split(']: ')[-1].replace(' ms', '').strip()
                    
                    server_location_match = server_name_loc.split('(')[-1].replace(')', '').strip() if '(' in server_name_loc else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    parsed_data['server_display'] = server_location_match
                    parsed_data['server_ping'] = ping_match
                elif "Download:" in line:
                    parsed_data['download'] = line.replace("Download: ", "").strip()
                elif "Upload:" in line:
                    parsed_data['upload'] = line.replace("Upload: ", "").strip()
                elif "Share results:" in line:
                    parsed_data['share_link'] = line.replace("Share results: ", "").strip()

            result_lines = [
                f"<b>{EMOJI['header']} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã SpeedTest</b>",
                f"{EMOJI['server']} <b>–°–µ—Ä–≤–µ—Ä:</b> {parsed_data.get('server_display', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                f"{EMOJI['ping']} <b>–ü–∏–Ω–≥:</b> {parsed_data.get('server_ping', 'N/A')} –º—Å",
                f"{EMOJI['download_upload_line_prefix']} <b>–ó–∞–≥—Ä—É–∑–∫–∞:</b> {parsed_data.get('download', 'N/A')} | <b>–û—Ç–¥–∞—á–∞:</b> {parsed_data.get('upload', 'N/A')}",
            ]
            if parsed_data.get('share_link'):
                result_lines.append(f"{EMOJI['share']} <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è:</b> <a href='{parsed_data['share_link']}'>–†–µ–∑—É–ª—å—Ç–∞—Ç</a>")

            final_message = "\n".join(result_lines)
            await status_message.edit(final_message, parse_mode='html', link_preview=False)

        except FileNotFoundError:
            await status_message.edit("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ö–æ–º–∞–Ω–¥–∞ speedtest-cli –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä: sudo apt install speedtest-cli –∏–ª–∏ pip install speedtest-cli")
        except Exception as e:
            await status_message.edit(f"‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:</b> {e}")